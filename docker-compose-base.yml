version: "2.1"

services:

  # ---------------------------------
  # Database
  # ---------------------------------

  postgres-base:
    image: postgres:10-alpine
    environment:
      PGUSER: postgres
    healthcheck:
      test: pg_isready
      interval: 2s
      timeout: 3s
      retries: 30

  minio-base:
    image: minio/minio:latest
    volumes:
      - ./.persistent_data/media:/data
    environment:
      MINIO_ACCESS_KEY: ${MINIO_STORAGE_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_STORAGE_SECRET_KEY}
    command: minio server --quiet --address minio:9000 /data
    ports:
      - 9000:9000

  # ---------------------------------
  # Aether kernel
  # ---------------------------------

  kernel-base:
    image: ehealthafrica/aether-kernel:${AETHER_VERSION}
    environment:
      CSRF_COOKIE_DOMAIN: ${BASE_DOMAIN}
      DJANGO_SECRET_KEY: ${KERNEL_DJANGO_SECRET_KEY}
      LOGGING_FORMATTER: verbose
      HTML_SELECT_CUTOFF: 10

      BUCKET_NAME: kernel
      DJANGO_STORAGE_BACKEND: minio
      MINIO_STORAGE_ACCESS_KEY: ${MINIO_STORAGE_ACCESS_KEY}
      MINIO_STORAGE_SECRET_KEY: ${MINIO_STORAGE_SECRET_KEY}
      MINIO_STORAGE_ENDPOINT: minio:9000
      MINIO_STORAGE_MEDIA_USE_PRESIGNED: null
      MINIO_STORAGE_MEDIA_URL: ${BASE_HOST}/minio/kernel
      MINIO_STORAGE_AUTO_CREATE_MEDIA_BUCKET: "true"
      MINIO_STORAGE_AUTO_CREATE_MEDIA_POLICY: "true"

      APP_NAME: Aether Kernel

      ADMIN_USERNAME: ${KERNEL_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${KERNEL_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${KERNEL_ADMIN_TOKEN}

      KERNEL_READONLY_DB_USERNAME: ${KERNEL_READONLY_DB_USERNAME}
      KERNEL_READONLY_DB_PASSWORD: ${KERNEL_READONLY_DB_PASSWORD}

      DB_NAME: aether
      PGHOST: db
      PGPASSWORD: ${KERNEL_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      # Export
      EXPORT_CSV_ESCAPE: "\\"
      EXPORT_CSV_QUOTES: "\""
      EXPORT_CSV_SEPARATOR: ","
      EXPORT_DATA_FORMAT: "split"
      EXPORT_HEADER_CONTENT: "labels"
      EXPORT_HEADER_SEPARATOR: "/"
      EXPORT_HEADER_SHORTEN: "no"

      # Kong requirements
      GATEWAY_SERVICE_ID: kernel
      GATEWAY_PUBLIC_REALM: ${PUBLIC_REALM}

      KEYCLOAK_SERVER_URL: ${BASE_HOST}/keycloak/auth/realms
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_AETHER_CLIENT}

      MULTITENANCY: "true"
      DEFAULT_REALM: ${DEFAULT_REALM}
      REALM_COOKIE: ${REALM_COOKIE}

      UWSGI_BUFFER_SIZE: 32768
      CUSTOM_UWSGI_SERVE_STATIC: "true"

      WEB_SERVER_PORT: 8000
    volumes:
      # backup folder
      - ./.persistent_data/backups/kernel:/backups
    ports:
      - 8000:8000
    command: start


  # ---------------------------------
  # Aether ODK Module
  # ---------------------------------

  odk-base:
    image: ehealthafrica/aether-odk:${AETHER_VERSION}
    environment:
      CSRF_COOKIE_DOMAIN: ${BASE_DOMAIN}
      DJANGO_SECRET_KEY: ${ODK_DJANGO_SECRET_KEY}
      LOGGING_FORMATTER: verbose
      HTML_SELECT_CUTOFF: 10

      BUCKET_NAME: odk
      DJANGO_STORAGE_BACKEND: minio
      MINIO_STORAGE_ACCESS_KEY: ${MINIO_STORAGE_ACCESS_KEY}
      MINIO_STORAGE_SECRET_KEY: ${MINIO_STORAGE_SECRET_KEY}
      MINIO_STORAGE_ENDPOINT: minio:9000
      MINIO_STORAGE_MEDIA_USE_PRESIGNED: null
      MINIO_STORAGE_MEDIA_URL: ${BASE_HOST}/minio/odk
      MINIO_STORAGE_AUTO_CREATE_MEDIA_BUCKET: "true"
      MINIO_STORAGE_AUTO_CREATE_MEDIA_POLICY: "true"

      APP_NAME: Aether ODK

      ADMIN_USERNAME: ${ODK_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ODK_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${ODK_ADMIN_TOKEN}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: ${BASE_HOST}/{realm}/kernel
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      DB_NAME: odk
      PGHOST: db
      PGPASSWORD: ${ODK_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      # Kong requirements
      GATEWAY_SERVICE_ID: odk
      GATEWAY_PUBLIC_REALM: ${PUBLIC_REALM}

      KEYCLOAK_SERVER_URL: ${BASE_HOST}/keycloak/auth/realms
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_AETHER_CLIENT}

      MULTITENANCY: "true"
      DEFAULT_REALM: ${DEFAULT_REALM}
      REALM_COOKIE: ${REALM_COOKIE}

      UWSGI_BUFFER_SIZE: 32768
      CUSTOM_UWSGI_SERVE_STATIC: "true"

      WEB_SERVER_PORT: 8002
    volumes:
      # backup folder
      - ./.persistent_data/backups/odk:/backups
    ports:
      - 8002:8002
    command: start


  # ---------------------------------
  # Aether UI
  # ---------------------------------

  ui-base:
    image: ehealthafrica/aether-ui:${AETHER_VERSION}
    environment:
      CSRF_COOKIE_DOMAIN: ${BASE_DOMAIN}
      DJANGO_SECRET_KEY: ${UI_DJANGO_SECRET_KEY}
      LOGGING_FORMATTER: verbose
      HTML_SELECT_CUTOFF: 10

      APP_NAME: Aether

      ADMIN_USERNAME: ${UI_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${UI_ADMIN_PASSWORD}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: ${BASE_HOST}/{realm}/kernel
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      DB_NAME: ui
      PGHOST: db
      PGPASSWORD: ${UI_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      # Kong requirements
      GATEWAY_SERVICE_ID: ui
      GATEWAY_PUBLIC_REALM: ${PUBLIC_REALM}

      KEYCLOAK_SERVER_URL: ${BASE_HOST}/keycloak/auth/realms
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_AETHER_CLIENT}

      MULTITENANCY: "true"
      DEFAULT_REALM: ${DEFAULT_REALM}
      REALM_COOKIE: ${REALM_COOKIE}

      UWSGI_BUFFER_SIZE: 32768
      CUSTOM_UWSGI_SERVE_STATIC: "true"

      WEB_SERVER_PORT: 8004
    volumes:
      # backup folder
      - ./.persistent_data/backups/ui:/backups
    ports:
      - 8004:8004
    command: start


  # ---------------------------------
  # Kafka & Zookeeper
  # ---------------------------------

  zookeeper-base:
    image: confluentinc/cp-zookeeper:5.1.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SESSION_TIMEOUT_MS: 750  # may be too short for prod.
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/zookeeper/zk_server_jaas.conf
        -DjaasLoginRenew=3600000
        -DrequireClientAuthScheme=digest
        -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
        -Dzookeeper.authProvider.2=org.apache.zookeeper.server.auth.DigestAuthenticationProvider
    extra_hosts:
      - "moby:127.0.0.1"
    volumes:
      - ./kafka/zk_server_jaas.conf:/etc/zookeeper/zk_server_jaas.conf

  kafka-base:
    image: confluentinc/cp-kafka:5.1.1
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      # Listeners and Protocols
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL_SASL:SASL_PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT,INTERNAL:SASL_PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL_SASL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      # SASL Settings
      KAFKA_SASL_ENABLED_MECHANISMS: SCRAM-SHA-256,SCRAM-SHA-512,PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      # ACL Inclusion
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.auth.SimpleAclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"
      # Broker topic settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: -1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # Generic Kafka Opts
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      # Auth debugging
      # KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=DEBUG"
      # KAFKA_LOG4J_ROOT_LOGLEVEL: DEBUG
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf

    volumes:
      - ./kafka/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
    extra_hosts:
      - moby:127.0.0.1


  # ---------------------------------
  # Aether Kafka Producer
  # ---------------------------------

  aether-producer-base:
    image: ehealthafrica/aether-producer:${AETHER_VERSION}
    environment:
      PYTHONUNBUFFERED: 1

      # These variables will override the ones indicated in the settings file
      KERNEL_URL: http://kernel:8000
      KERNEL_USERNAME: ${KERNEL_ADMIN_USERNAME}
      KERNEL_PASSWORD: ${KERNEL_ADMIN_PASSWORD}

      POSTGRES_HOST: db
      POSTGRES_DBNAME: aether
      POSTGRES_USER: ${KERNEL_READONLY_DB_USERNAME}
      POSTGRES_PASSWORD: ${KERNEL_READONLY_DB_PASSWORD}

      OFFSET_DB_HOST: db
      OFFSET_DB_USER: postgres
      OFFSET_DB_PORT: 5432
      OFFSET_DB_PASSWORD: ${KERNEL_DB_PASSWORD}
      OFFSET_DB_NAME: producer_offset_db

      PRODUCER_ADMIN_USER: ${PRODUCER_ADMIN_USER}
      PRODUCER_ADMIN_PW: ${PRODUCER_ADMIN_PW}
      SERVER_PORT: 5005

      # default settings file
      PRODUCER_SETTINGS_FILE: /code/producer/settings.json
    ports:
      - 5005:5005
    command: start


  # ---------------------------------
  # API & Auth
  # ---------------------------------

  kong-base:
    image: aether-kong
    build: ./api-auth/kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}

      KONG_NGINX_PROXY_LARGE_CLIENT_HEADER_BUFFERS: "16 128k"
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:80, 0.0.0.0:8443

      KONG_PLUGINS: bundled,kong-oidc-auth
    ports:
      - 80:80
      - 8443:8443  # ODK Collect requirement!!!
    command: ["kong", "start", "--v"]

  keycloak-base:
    image: aether-keycloak
    build: ./api-auth/keycloak
    volumes:
      # custom aether theme
      - ./api-auth/keycloak/aether-theme:/opt/jboss/keycloak/themes/aether
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: ${KEYCLOAK_PG_PASSWORD}

      KEYCLOAK_USER: ${KEYCLOAK_GLOBAL_ADMIN}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_GLOBAL_PASSWORD}

      PROXY_ADDRESS_FORWARDING: "true"
      PROXY_PORT_FORWARDING: "true"

      KEYCLOAK_LOGLEVEL: ERROR
      ROOT_LOGLEVEL: ERROR
    ports:
      - 8080:8080


  # ---------------------------------
  # Data Generation
  # ---------------------------------

  assets-base:
    image: aether-assets
    build:
      context: ./assets/generation
      dockerfile: Dockerfile
    volumes:
      - ./assets:/code/assets
    environment:
      KERNEL_URL: ${BASE_HOST}/dev/kernel
      KERNEL_USER: ${KEYCLOAK_INITIAL_USER_USERNAME}
      KERNEL_PASSWORD: ${KEYCLOAK_INITIAL_USER_PASSWORD}
      REALM: dev
      PROJECT_NAME: DefaultDemo
      SUBMISSION_ENDPOINT: default_mapping
    extra_hosts:
      - ${BASE_DOMAIN}:${KONG_IP}

  auth-base:
    image: ehealthafrica/gateway-manager:latest
    environment:
      DEBUG: null

      KEYCLOAK_GLOBAL_ADMIN: ${KEYCLOAK_GLOBAL_ADMIN}
      KEYCLOAK_GLOBAL_PASSWORD: ${KEYCLOAK_GLOBAL_PASSWORD}
      KEYCLOAK_KONG_CLIENT: ${KEYCLOAK_KONG_CLIENT}

      BASE_DOMAIN: ${BASE_DOMAIN}
      BASE_HOST: ${BASE_HOST}
      KEYCLOAK_INTERNAL: ${KEYCLOAK_INTERNAL}
      KONG_INTERNAL: ${KONG_INTERNAL}
      MINIO_INTERNAL: ${MINIO_INTERNAL}

      ZOOKEEPER_HOST: zookeeper:32181
      ZOOKEEPER_USER: ${ZK_ROOT_USER}
      ZOOKEEPER_PW: ${ZK_ROOT_PW}
      KAFKA_SECRET: ${KAFKA_SECRET}

    volumes:
      - ./api-auth/service:/code/service
      - ./api-auth/solution:/code/solution
    command: help
    extra_hosts:
      - ${BASE_DOMAIN}:${KONG_IP}
