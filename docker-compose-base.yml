version: "2.1"

services:

  # ---------------------------------
  # Database
  # ---------------------------------

  postgres-base:
    image: postgres:9.6-alpine
    environment:
      PGUSER: postgres
    healthcheck:
      test: pg_isready
      interval: 2s
      timeout: 3s
      retries: 30


  # ---------------------------------
  # NGINX
  # ---------------------------------

  nginx-base:
    image: nginx:alpine
    volumes:
      # config file
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./conf/nginx/sites-enabled:/etc/nginx/sites-enabled

      # nginx log files
      - ./.persistent_data/nginx:/var/log/nginx

      # static folders per container
      - ./.persistent_data/static:/static

      # media folders per container
      - ./.persistent_data/media:/media
    ports:
      # "HOST:CONTAINER"
      - "80:80"
      - "8443:8443"


  # ---------------------------------
  # Aether kernel
  # ---------------------------------

  kernel-base:
    image: ehealthafrica/aether-kernel:${AETHER_VERSION}
    environment:
      CSRF_COOKIE_DOMAIN: .aether.local
      DJANGO_SECRET_KEY: ${KERNEL_DJANGO_SECRET_KEY}

      DJANGO_STORAGE_BACKEND: filesystem
      HOSTNAME: kernel.aether.local

      APP_NAME: Aether Kernel

      ADMIN_USERNAME: ${KERNEL_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${KERNEL_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${KERNEL_ADMIN_TOKEN}

      KERNEL_READONLY_DB_USERNAME: ${KERNEL_READONLY_DB_USERNAME}
      KERNEL_READONLY_DB_PASSWORD: ${KERNEL_READONLY_DB_PASSWORD}

      DB_NAME: aether
      PGHOST: db
      PGPASSWORD: ${KERNEL_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      # Export
      EXPORT_CSV_ESCAPE: "\\"
      EXPORT_CSV_QUOTES: "\""
      EXPORT_CSV_SEPARATOR: ","
      EXPORT_DATA_FORMAT: "split"
      EXPORT_HEADER_CONTENT: "labels"
      EXPORT_HEADER_SEPARATOR: "/"
      EXPORT_HEADER_SHORTEN: "no"

      WEB_SERVER_PORT: 8000
    volumes:
      # media folder used by nginx
      - ./.persistent_data/media/kernel:/media
      # static folder used by nginx
      - ./.persistent_data/static/kernel:/var/www/static
      # temporary folder for Excel files
      - ./.persistent_data/export/kernel:/tmp
      # backups folder
      - ./.persistent_data/backups/kernel:/backups
    ports:
      # "HOST:CONTAINER"
      - "8000:8000"
    command: start


  # ---------------------------------
  # Aether ODK Module
  # ---------------------------------

  odk-base:
    image: ehealthafrica/aether-odk:${AETHER_VERSION}
    environment:
      CSRF_COOKIE_DOMAIN: .aether.local
      DJANGO_SECRET_KEY: ${ODK_DJANGO_SECRET_KEY}

      DJANGO_STORAGE_BACKEND: filesystem
      HOSTNAME: odk.aether.local

      APP_NAME: Aether ODK

      ADMIN_USERNAME: ${ODK_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ODK_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${ODK_ADMIN_TOKEN}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: http://kernel:8000
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      DB_NAME: aether-odk
      PGHOST: db
      PGPASSWORD: ${ODK_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      WEB_SERVER_PORT: 8002
    volumes:
      # media folder used by nginx
      - ./.persistent_data/media/odk:/media
      # static folder used by nginx
      - ./.persistent_data/static/odk:/var/www/static
      # backups folder
      - ./.persistent_data/backups/odk:/backups
    ports:
      - "8002:8002"
    command: start


  # ---------------------------------
  # Aether UI
  # ---------------------------------

  ui-base:
    image: ehealthafrica/aether-ui:${AETHER_VERSION}
    environment:
      CSRF_COOKIE_DOMAIN: .aether.local
      DJANGO_SECRET_KEY: ${UI_DJANGO_SECRET_KEY}

      DJANGO_STORAGE_BACKEND: filesystem
      HOSTNAME: ui.aether.local

      APP_NAME: Aether

      ADMIN_USERNAME: ${UI_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${UI_ADMIN_PASSWORD}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: http://kernel:8000
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      DB_NAME: aether-ui
      PGHOST: db
      PGPASSWORD: ${UI_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      WEB_SERVER_PORT: 8004
    volumes:
      # static folder used by nginx
      - ./.persistent_data/static/ui:/var/www/static
      # backups folder
      - ./.persistent_data/backups/ui:/backups
    ports:
      - "8004:8004"
    command: start


  # ---------------------------------
  # Kafka & Zookeeper
  # ---------------------------------

  zookeeper-base:
    image: confluentinc/cp-zookeeper:5.1.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    extra_hosts:
      - "moby:127.0.0.1"

  kafka-base:
    image: confluentinc/cp-kafka:5.1.1
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: -1
      ADVERTISED_HOST_NAME: kafka
    extra_hosts:
      - "moby:127.0.0.1"


  # ---------------------------------
  # Aether Kafka Producer
  # ---------------------------------

  aether-producer-base:
    image: ehealthafrica/aether-producer:${AETHER_VERSION}
    environment:
      PYTHONUNBUFFERED: 1

      # These variables will override the ones indicated in the settings file
      KERNEL_URL: http://kernel:8000
      KERNEL_USERNAME: ${KERNEL_ADMIN_USERNAME}
      KERNEL_PASSWORD: ${KERNEL_ADMIN_PASSWORD}

      POSTGRES_HOST: db
      POSTGRES_DBNAME: aether
      POSTGRES_USER: ${KERNEL_READONLY_DB_USERNAME}
      POSTGRES_PASSWORD: ${KERNEL_READONLY_DB_PASSWORD}

      OFFSET_DB_HOST: db
      OFFSET_DB_USER: postgres
      OFFSET_DB_PORT: 5432
      OFFSET_DB_PASSWORD: ${KERNEL_DB_PASSWORD}
      OFFSET_DB_NAME: producer_offset_db

      PRODUCER_ADMIN_USER: ${PRODUCER_ADMIN_USER}
      PRODUCER_ADMIN_PW: ${PRODUCER_ADMIN_PW}
      SERVER_PORT: 5005

      # default settings file
      PRODUCER_SETTINGS_FILE: /code/producer/settings.json
    ports:
      - "5005:5005"
    command: start
