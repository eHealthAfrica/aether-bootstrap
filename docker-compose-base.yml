version: "2.1"

services:

  # ---------------------------------
  # Database
  # ---------------------------------

  postgres-base:
    image: postgres:9.6-alpine
    environment:
      PGUSER: postgres
    healthcheck:
      test: pg_isready
      interval: 2s
      timeout: 3s
      retries: 30

  minio-base:
    image: minio/minio:latest
    volumes:
      - ./.persistent_data/media:/data
    environment:
      MINIO_ACCESS_KEY: ${MINIO_STORAGE_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_STORAGE_SECRET_KEY}
    command: minio server --quiet --address minio:9000 /data
    ports:
      - "9000:9000"

  # ---------------------------------
  # NGINX
  # ---------------------------------

  nginx-base:
    image: nginx:alpine
    volumes:
      # config file
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./conf/nginx/sites-enabled:/etc/nginx/sites-enabled

      # nginx log files
      - ./.persistent_data/nginx:/var/log/nginx

      # static folders per container
      - ./.persistent_data/static:/static

      # media folders per container
      - ./.persistent_data/media:/media
    ports:
      # "HOST:CONTAINER"
      - "80:80"
      - "8443:8443"


  # ---------------------------------
  # Aether kernel
  # ---------------------------------

  kernel-base:
    image: ehealthafrica/aether-kernel:${AETHER_VERSION}
    environment:
      # Uncomment these lines to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server
      # HOSTNAME: kernel.aether.local

      CSRF_COOKIE_DOMAIN: aether.local
      DJANGO_SECRET_KEY: ${KERNEL_DJANGO_SECRET_KEY}
      LOGGING_FORMATTER: verbose
      HTML_SELECT_CUTOFF: 10

      BUCKET_NAME: kernel
      DJANGO_STORAGE_BACKEND: minio
      MINIO_STORAGE_ACCESS_KEY: ${MINIO_STORAGE_ACCESS_KEY}
      MINIO_STORAGE_SECRET_KEY: ${MINIO_STORAGE_SECRET_KEY}
      MINIO_STORAGE_ENDPOINT: minio:9000
      # Use these settings to make it accessible via browser
      MINIO_STORAGE_MEDIA_USE_PRESIGNED: null
      MINIO_STORAGE_MEDIA_URL: http://localhost:9000/kernel
      MINIO_STORAGE_AUTO_CREATE_MEDIA_BUCKET: "true"
      MINIO_STORAGE_AUTO_CREATE_MEDIA_POLICY: "true"

      APP_NAME: Aether Kernel

      ADMIN_USERNAME: ${KERNEL_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${KERNEL_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${KERNEL_ADMIN_TOKEN}

      KERNEL_READONLY_DB_USERNAME: ${KERNEL_READONLY_DB_USERNAME}
      KERNEL_READONLY_DB_PASSWORD: ${KERNEL_READONLY_DB_PASSWORD}

      DB_NAME: aether
      PGHOST: db
      PGPASSWORD: ${KERNEL_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      # Export
      EXPORT_CSV_ESCAPE: "\\"
      EXPORT_CSV_QUOTES: "\""
      EXPORT_CSV_SEPARATOR: ","
      EXPORT_DATA_FORMAT: "split"
      EXPORT_HEADER_CONTENT: "labels"
      EXPORT_HEADER_SEPARATOR: "/"
      EXPORT_HEADER_SHORTEN: "no"

      APP_URL: "/<slug:realm>/<slug:service>"
      STATIC_URL: "/_static/kernel/static/"
      MULTITENANCY: "true"
      UWSGI_BUFFER_SIZE: 32768
      CUSTOM_UWSGI_SERVE_STATIC: "true"
      WEB_SERVER_PORT: 8000

    volumes:
      # static folder
      - ./.persistent_data/static/kernel:/var/www/static
      # temporary folder for Excel files
      - ./.persistent_data/export/kernel:/tmp
      # backup folder
      - ./.persistent_data/backups/kernel:/backups
    ports:
      # "HOST:CONTAINER"
      - "8000:8000"
    command: start


  # ---------------------------------
  # Aether ODK Module
  # ---------------------------------

  odk-base:
    image: ehealthafrica/aether-odk:${AETHER_VERSION}
    environment:
      # Uncomment these lines to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server
      # HOSTNAME: odk.aether.local
      CSRF_COOKIE_DOMAIN: .aether.local
      DJANGO_SECRET_KEY: ${ODK_DJANGO_SECRET_KEY}
      LOGGING_FORMATTER: verbose
      HTML_SELECT_CUTOFF: 10

      BUCKET_NAME: odk
      DJANGO_STORAGE_BACKEND: minio
      MINIO_STORAGE_ACCESS_KEY: ${MINIO_STORAGE_ACCESS_KEY}
      MINIO_STORAGE_SECRET_KEY: ${MINIO_STORAGE_SECRET_KEY}
      MINIO_STORAGE_ENDPOINT: minio:9000
      # Use these settings to make it accessible via browser
      MINIO_STORAGE_MEDIA_USE_PRESIGNED: null
      MINIO_STORAGE_MEDIA_URL: http://localhost:9000/odk
      MINIO_STORAGE_AUTO_CREATE_MEDIA_BUCKET: "true"
      MINIO_STORAGE_AUTO_CREATE_MEDIA_POLICY: "true"

      APP_NAME: Aether ODK

      ADMIN_USERNAME: ${ODK_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ODK_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${ODK_ADMIN_TOKEN}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: http://kernel:8000
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      DB_NAME: odk
      PGHOST: db
      PGPASSWORD: ${ODK_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      APP_URL: "/<slug:realm>/<slug:service>"
      STATIC_URL: "/_static/odk/static/"
      MULTITENANCY: "true"
      UWSGI_BUFFER_SIZE: 32768
      CUSTOM_UWSGI_SERVE_STATIC: "true"
      WEB_SERVER_PORT: 8002
    volumes:
      # static folder
      - ./.persistent_data/static/odk:/var/www/static
      # backup folder
      - ./.persistent_data/backups/odk:/backups
    ports:
      - "8002:8002"
    command: start


  # ---------------------------------
  # Aether UI
  # ---------------------------------

  ui-base:
    image: ehealthafrica/aether-ui:${AETHER_VERSION}
    environment:
      # Uncomment these lines to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server
      # HOSTNAME: ui.aether.local
      CSRF_COOKIE_DOMAIN: .aether.local
      DJANGO_SECRET_KEY: ${UI_DJANGO_SECRET_KEY}
      LOGGING_FORMATTER: verbose
      HTML_SELECT_CUTOFF: 10

      DJANGO_STORAGE_BACKEND: filesystem
      MINIO_STORAGE_ACCESS_KEY: ${MINIO_STORAGE_ACCESS_KEY}
      MINIO_STORAGE_SECRET_KEY: ${MINIO_STORAGE_SECRET_KEY}
      MINIO_STORAGE_ENDPOINT: minio:9000

      APP_NAME: Aether

      ADMIN_USERNAME: ${UI_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${UI_ADMIN_PASSWORD}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: http://kernel:8000
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      DB_NAME: ui
      PGHOST: db
      PGPASSWORD: ${UI_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres


      APP_URL: "/<slug:realm>/<slug:service>"
      STATIC_URL: "/_static/ui/static/"
      MULTITENANCY: "true"
      UWSGI_BUFFER_SIZE: 32768
      CUSTOM_UWSGI_SERVE_STATIC: "true"
      WEB_SERVER_PORT: 8004
    volumes:
      # static folder
      - ./.persistent_data/static/ui:/var/www/static
      # backup folder
      - ./.persistent_data/backups/ui:/backups
    ports:
      - "8004:8004"
    command: start


  # ---------------------------------
  # Kafka & Zookeeper
  # ---------------------------------

  zookeeper-base:
    image: confluentinc/cp-zookeeper:5.1.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    extra_hosts:
      - "moby:127.0.0.1"

  kafka-base:
    image: confluentinc/cp-kafka:5.1.1
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: -1
      ADVERTISED_HOST_NAME: kafka
    extra_hosts:
      - "moby:127.0.0.1"


  # ---------------------------------
  # Aether Kafka Producer
  # ---------------------------------

  aether-producer-base:
    image: ehealthafrica/aether-producer:${AETHER_VERSION}
    environment:
      PYTHONUNBUFFERED: 1

      # These variables will override the ones indicated in the settings file
      KERNEL_URL: http://kernel:8000
      KERNEL_USERNAME: ${KERNEL_ADMIN_USERNAME}
      KERNEL_PASSWORD: ${KERNEL_ADMIN_PASSWORD}

      POSTGRES_HOST: db
      POSTGRES_DBNAME: aether
      POSTGRES_USER: ${KERNEL_READONLY_DB_USERNAME}
      POSTGRES_PASSWORD: ${KERNEL_READONLY_DB_PASSWORD}

      OFFSET_DB_HOST: db
      OFFSET_DB_USER: postgres
      OFFSET_DB_PORT: 5432
      OFFSET_DB_PASSWORD: ${KERNEL_DB_PASSWORD}
      OFFSET_DB_NAME: producer_offset_db

      PRODUCER_ADMIN_USER: ${PRODUCER_ADMIN_USER}
      PRODUCER_ADMIN_PW: ${PRODUCER_ADMIN_PW}
      SERVER_PORT: 5005

      # default settings file
      PRODUCER_SETTINGS_FILE: /code/producer/settings.json
    ports:
      - "5005:5005"
    command: start

  # ---------------------------------
  # API & Auth
  # ---------------------------------

  kong-base:
    build: ./api-auth/kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}

      KONG_NGINX_PROXY_LARGE_CLIENT_HEADER_BUFFERS: "16 128k"

      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:80
      KONG_LOG_LEVEL: debug

      KONG_PLUGINS: bundled,kong-oidc-auth

  keycloak-base:
    build: ./api-auth/keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: ${KEYCLOAK_PG_PASSWORD}
      KEYCLOAK_USER: ${KEYCLOAK_GLOBAL_ADMIN}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_GLOBAL_PASSWORD}
      PROXY_ADDRESS_FORWARDING: 'true'
      PROXY_PORT_FORWARDING: 'true'

  auth-base:
    build: ./api-auth/aether-auth
    environment:
      KEYCLOAK_GLOBAL_ADMIN: ${KEYCLOAK_GLOBAL_ADMIN}
      KEYCLOAK_GLOBAL_PASSWORD: ${KEYCLOAK_GLOBAL_PASSWORD}

      BASE_HOST: ${BASE_HOST}
      KEYCLOAK_INTERNAL: ${KEYCLOAK_INTERNAL}
      KONG_INTERNAL: ${KONG_INTERNAL}
    volumes:
      - ./api-auth/aether-auth:/code
