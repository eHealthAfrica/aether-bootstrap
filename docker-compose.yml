version: "2.1"

networks:
  # docker network create aether_internal
  aether:
    external:
      name: aether_internal

volumes:
  # docker volume create aether_database_data
  database_data:
    external:
      name: aether_database_data

services:

  # ---------------------------------
  # Databases
  # ---------------------------------

  db:
    extends:
      file: ./docker-compose-base.yml
      service: postgres-base
    environment:
      PGUSER: postgres
    healthcheck:
      test: pg_isready
      interval: 2s
      timeout: 3s
      retries: 30
    volumes:
      - database_data:/var/lib/postgresql/data
    networks:
      - aether

  minio:
    extends:
      file: ./docker-compose-base.yml
      service: minio-base
    networks:
      - aether

  # ---------------------------------
  # Aether kernel
  # ---------------------------------

  kernel:
    extends:
      file: ./docker-compose-base.yml
      service: kernel-base
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      aether:
        aliases:
          - kernel.aether.local

  # ---------------------------------
  # Aether UI
  # ---------------------------------

  ui:
    extends:
      file: ./docker-compose-base.yml
      service: ui-base
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      aether:
        aliases:
          - ui.aether.local

  # ---------------------------------
  # Aether ODK Module
  # ---------------------------------

  odk:
    extends:
      file: ./docker-compose-base.yml
      service: odk-base
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      aether:
        aliases:
          - odk.aether.local

  # ---------------------------------
  # API & Auth
  # ---------------------------------

  kong:
    extends:
      file: ./docker-compose-base.yml
      service: kong-base
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 80:80
      - 8001:8001  # TODO Remove
    networks:
      - aether
    extra_hosts:
      - "aether.local:127.0.0.1"
    command: ["kong", "start"]

  keycloak:
    extends:
      file: ./docker-compose-base.yml
      service: keycloak-base
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
      - aether

  auth:
    extends:
      file: ./docker-compose-base.yml
      service: auth-base
    depends_on:
      kong:
        condition: service_started
      keycloak:
        condition: service_started
    ports:
      - 3012:3012
    command: ['cat', '/dev/null']  # nothing to do here on "start"
    networks:
      - aether